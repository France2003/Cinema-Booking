import { useState } from "react";
import { Helmet } from "react-helmet";
import { toast } from "react-toastify";
import { useParams, useNavigate, Link } from "react-router-dom";
import { forgotPassword, resetPassword } from "../../services/authLogin/authLogin";
import AuthLayout from "../../components/AuthLayout";
import FormInput from "../../components/FormInput";
import Button from "../../components/Button";
import ImgBackground from "../../assets/img/bgrimg.jpg";
function ForgotPassword() {
    const { token } = useParams(); // l·∫•y token t·ª´ URL n·∫øu c√≥
    const navigate = useNavigate();
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirm, setConfirm] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    // G·ª≠i mail reset m·∫≠t kh·∫©u
    const handleForgot = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);
        try {
            const res = await forgotPassword(email);
            toast.success(res.message || "Vui l√≤ng ki·ªÉm tra email c·ªßa b·∫°n!");
            setEmail("");
        } catch (error: any) {
            toast.error(error.response?.data?.message || "C√≥ l·ªói x·∫£y ra!");
        } finally {
            setIsLoading(false);
        }
    };
    // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
    const handleReset = async (e: React.FormEvent) => {
        e.preventDefault();
        if (password !== confirm) {
            toast.error("M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!");
            return;
        }
        setIsLoading(true);
        try {
            const res = await resetPassword(token as string, password);
            toast.success(res.message || "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!");
            navigate("/login");
        } catch (error: any) {
            toast.error(error.response?.data?.message || "C√≥ l·ªói x·∫£y ra!");
        } finally {
            setIsLoading(false);
        }
    };
    return (
        <div className="forgot-password min-h-screen flex items-center justify-center bg-gray-900 text-black">
            <Helmet>
                <title>{token ? "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u" : "Qu√™n m·∫≠t kh·∫©u"} | Booking Cinema</title>
            </Helmet>
            <AuthLayout rightBgUrl={ImgBackground}>
                <div className="w-full max-w-md bg-white rounded-lg shadow-md p-8">
                    <h1
                        className="text-4xl font-extrabold text-center mb-6 
                       bg-gradient-to-r from-pink-500 via-yellow-400 to-red-500 
                       bg-clip-text text-transparent tracking-wide"
                    >
                        {token ? "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u üîê" : "Qu√™n m·∫≠t kh·∫©u üîë"}
                    </h1>
                    {!token ? (
                        // Form Qu√™n m·∫≠t kh·∫©u
                        <form onSubmit={handleForgot} className="flex flex-col gap-4">
                            <FormInput
                                label="Email"
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                            />
                            <Button
                                text="G·ª≠i li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"
                                loading={isLoading}
                                type="submit"
                            />
                            <Link
                                to="/login"
                                className="text-sm text-blue-500 hover:underline text-center"
                            >
                                Quay l·∫°i trang ƒëƒÉng nh·∫≠p
                            </Link>
                        </form>
                    ) : (
                        // Form Reset m·∫≠t kh·∫©u
                        <form onSubmit={handleReset} className="flex flex-col gap-4">
                            <FormInput
                                label="M·∫≠t kh·∫©u m·ªõi"
                                type="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                                showToggle={true}
                            />
                            <FormInput
                                label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                                type="password"
                                value={confirm}
                                onChange={(e) => setConfirm(e.target.value)}
                                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                                showToggle={true} 
                            />
                            <Button
                                text="ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u"
                                loading={isLoading}
                                type="submit"
                            />
                            <Link
                                to="/login"
                                className="text-sm text-blue-500 hover:underline text-center"
                            >
                                Quay l·∫°i trang ƒëƒÉng nh·∫≠p
                            </Link>
                        </form>
                    )}
                </div>
            </AuthLayout>
        </div>
    );
}

export default ForgotPassword;
